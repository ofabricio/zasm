\n NL 1 1
val_to_hex_str WORD 2 1
\n NL 2 15
pusha WORD 3 5
\n NL 3 10
mov WORD 4 5
di WORD 4 9
HEX_OUT WORD 4 12
+ SYMBOL 4 20
05 WORD 4 22
\n NL 4 24
mov WORD 5 5
cx WORD 5 9
04 WORD 5 12
\n NL 5 14
> SYMBOL 6 5
mov WORD 6 7
ax WORD 6 11
bx WORD 6 14
\n NL 6 16
and WORD 7 5
al WORD 7 9
0F WORD 7 12
\n NL 7 14
cmp WORD 8 5
al WORD 8 9
09 WORD 8 12
\n NL 8 14
jle WORD 9 5
> SYMBOL 9 9
\n NL 9 49
add WORD 10 5
al WORD 10 9
07 WORD 10 12
\n NL 10 14
> SYMBOL 11 5
add WORD 11 7
al WORD 11 11
30 WORD 11 14
\n NL 11 16
mov WORD 12 5
[ SYMBOL 12 9
di WORD 12 10
] SYMBOL 12 12
al WORD 12 14
\n NL 12 16
dec WORD 13 5
di WORD 13 9
\n NL 13 11
shr WORD 14 5
bx WORD 14 9
04 WORD 14 12
\n NL 14 14
dec WORD 15 5
cx WORD 15 9
\n NL 15 11
jnz WORD 16 5
< SYMBOL 16 9
< SYMBOL 16 10
\n NL 16 89
popa WORD 17 5
\n NL 17 9
ret WORD 18 5
\n NL 18 8
\n NL 19 1
HEX_OUT WORD 20 1
db WORD 20 9
'0x0000' STRING 20 12
00 WORD 20 21
\n NL 20 23
\n NL 21 1
\n NL 22 7
\n NL 23 1
global_label WORD 24 1
\n NL 24 13
mov WORD 25 5
eax WORD 25 9
ebx WORD 25 13
\n NL 25 16
. SYMBOL 26 1
loc_label WORD 26 2
\n NL 26 11
dec WORD 27 5
eax WORD 27 9
\n NL 27 12
jnz WORD 28 5
. SYMBOL 28 9
loc_label WORD 28 10
\n NL 28 19
jz WORD 29 5
global_label WORD 29 8
. SYMBOL 29 20
loc_label WORD 29 21
\n NL 29 30
\n NL 30 1
\n NL 31 7
\n NL 32 1
db WORD 33 5
00 WORD 33 8
\n NL 33 10
dw WORD 34 5
01 WORD 34 8
02 WORD 34 11
03 WORD 34 14
04 WORD 34 17
\n NL 34 19
db WORD 35 5
'hello' STRING 35 8
0A WORD 35 16
00 WORD 35 19
\n NL 35 21
dd WORD 36 5
? SYMBOL 36 8
\n NL 36 9
\n NL 37 1
times WORD 38 5
0200 WORD 38 11
- SYMBOL 38 16
( SYMBOL 38 18
$ SYMBOL 38 19
- SYMBOL 38 21
$ SYMBOL 38 23
$ SYMBOL 38 24
) SYMBOL 38 25
db WORD 38 27
00 WORD 38 30
\n NL 38 32
\n NL 39 1
\n NL 40 7
\n NL 41 1
00 WORD 42 5
\n NL 42 7
arr WORD 43 5
01 WORD 43 9
00 WORD 43 12
02 WORD 43 15
00 WORD 43 18
03 WORD 43 21
00 WORD 43 24
\n NL 43 26
\n NL 44 1
\n NL 45 18
\n NL 46 1
db WORD 47 9
00 WORD 47 12
\n NL 47 14
arr WORD 48 5
dw WORD 48 9
01 WORD 48 12
02 WORD 48 15
03 WORD 48 18
\n NL 48 20
\n NL 49 1
\n NL 50 7
\n NL 51 1
mov WORD 52 5
eax WORD 52 9
ebx WORD 52 13
\n NL 52 16
90 WORD 53 5
\n NL 53 7
mov WORD 54 5
ecx WORD 54 9
ebx WORD 54 13
\n NL 54 16
\n NL 55 1
\n NL 56 18
\n NL 57 1
mov WORD 58 5
eax WORD 58 9
ebx WORD 58 13
\n NL 58 16
nop WORD 59 5
\n NL 59 8
mov WORD 60 5
ecx WORD 60 9
ebx WORD 60 13
\n NL 60 16
\n NL 61 1
\n NL 62 7
\n NL 63 1
@ SYMBOL 64 1
org WORD 64 2
7C00 WORD 64 6
\n NL 64 10
@ SYMBOL 65 1
align WORD 65 2
04 WORD 65 8
\n NL 65 10
@ SYMBOL 66 1
include WORD 66 2
'example.asm' STRING 66 10
\n NL 66 23
\n NL 67 1
@ SYMBOL 68 1
struct WORD 68 2
Point WORD 68 9
{ SYMBOL 68 15
\n NL 68 16
x WORD 69 5
db WORD 69 7
00 WORD 69 10
\n NL 69 12
y WORD 70 5
db WORD 70 7
00 WORD 70 10
\n NL 70 12
} SYMBOL 71 1
\n NL 71 2
\n NL 72 1
@ SYMBOL 73 1
print WORD 73 2
{ SYMBOL 73 8
\n NL 73 9
} SYMBOL 74 1
\n NL 74 2
\n NL 75 1
@ SYMBOL 76 1
define WORD 76 2
VALUE WORD 76 9
0123 WORD 76 15
\n NL 76 19
\n NL 77 1
@ SYMBOL 78 1
if WORD 78 2
VERSION WORD 78 5
= SYMBOL 78 13
= SYMBOL 78 14
0 WORD 78 16
\n NL 78 17
nop WORD 79 5
\n NL 79 8
@ SYMBOL 80 1
elseif WORD 80 2
VERSION WORD 80 9
= SYMBOL 80 17
= SYMBOL 80 18
1 WORD 80 20
\n NL 80 21
\n NL 81 14
@ SYMBOL 82 1
else WORD 82 2
\n NL 82 6
\n NL 83 14
@ SYMBOL 84 1
end WORD 84 2
\n NL 84 5
\n NL 85 1
@ SYMBOL 86 1
ifndef WORD 86 2
__PRINT__ WORD 86 9
\n NL 86 18
@ SYMBOL 87 1
define WORD 87 2
__PRINT__ WORD 87 9
\n NL 87 18
\n NL 88 14
@ SYMBOL 89 1
end WORD 89 2
\n NL 89 5
@ SYMBOL 90 1
guard WORD 90 2
__PRINT__ WORD 90 8
\n NL 90 17
\n NL 91 1
@ SYMBOL 92 1
macro WORD 92 2
pushes WORD 92 8
a WORD 92 15
b WORD 92 17
{ SYMBOL 92 19
\n NL 92 20
push WORD 93 5
a WORD 93 10
\n NL 93 11
push WORD 94 5
b WORD 94 10
\n NL 94 11
} SYMBOL 95 1
\n NL 95 2
\n NL 96 1
# SYMBOL 97 5
pushes WORD 97 6
eax WORD 97 13
ebx WORD 97 17
\n NL 97 20
call WORD 98 5
hello WORD 98 10
\n NL 98 15
\n NL 99 1
\n NL 100 7
\n NL 101 1
# SYMBOL 102 5
example WORD 102 6
( SYMBOL 102 13
eax WORD 102 14
, SYMBOL 102 17
ebx WORD 102 19
, SYMBOL 102 22
ecx WORD 102 24
, SYMBOL 102 27
out WORD 102 29
r WORD 102 33
) SYMBOL 102 34
\n NL 102 35
mov WORD 103 5
eax WORD 103 9
r WORD 103 13
\n NL 103 14
ret WORD 104 5
\n NL 104 8
\n NL 105 1
@ SYMBOL 106 1
fn WORD 106 2
example WORD 106 5
( SYMBOL 106 13
keep WORD 106 14
eax WORD 106 19
, SYMBOL 106 22
ebx WORD 106 24
, SYMBOL 106 27
stack WORD 106 29
v WORD 106 35
, SYMBOL 106 36
out WORD 106 38
r WORD 106 42
) SYMBOL 106 43
{ SYMBOL 106 45
\n NL 106 46
mov WORD 107 5
eax WORD 107 9
ebx WORD 107 13
\n NL 107 16
add WORD 108 5
eax WORD 108 9
v WORD 108 13
\n NL 108 14
mov WORD 109 5
r WORD 109 9
eax WORD 109 11
\n NL 109 14
} SYMBOL 110 1
\n NL 110 2
\n NL 111 1
\n NL 112 7
\n NL 113 1
sub WORD 114 5
esp WORD 114 10
04 WORD 114 14
\n NL 114 80
push WORD 115 5
ecx WORD 115 10
\n NL 115 58
call WORD 116 5
example WORD 116 10
\n NL 116 17
add WORD 117 5
esp WORD 117 10
08 WORD 117 14
\n NL 117 16
mov WORD 118 5
eax WORD 118 10
[ SYMBOL 118 14
esp WORD 118 15
- SYMBOL 118 18
04 WORD 118 19
] SYMBOL 118 21
\n NL 118 53
ret WORD 119 5
\n NL 119 8
\n NL 120 1
example WORD 121 1
\n NL 121 9
push WORD 122 5
eax WORD 122 10
\n NL 122 71
mov WORD 123 5
eax WORD 123 10
ebx WORD 123 14
\n NL 123 17
add WORD 124 5
eax WORD 124 10
[ SYMBOL 124 14
esp WORD 124 15
+ SYMBOL 124 18
04 WORD 124 19
] SYMBOL 124 21
\n NL 124 55
mov WORD 125 5
[ SYMBOL 125 10
esp WORD 125 11
+ SYMBOL 125 14
08 WORD 125 15
] SYMBOL 125 17
eax WORD 125 19
\n NL 125 53
pop WORD 126 5
eax WORD 126 10
\n NL 126 13
ret WORD 127 5
\n NL 127 8
\n NL 128 1
\n NL 129 7
\n NL 130 1
@ SYMBOL 131 1
template WORD 131 2
'GDT' STRING 131 11
code WORD 131 17
{ SYMBOL 131 22
\n NL 131 23
Base WORD 132 5
0 WORD 132 17
\n NL 132 18
Limit WORD 133 5
0 WORD 133 17
\n NL 133 18
G WORD 134 5
0 WORD 134 17
\n NL 134 18
} SYMBOL 135 1
\n NL 135 2
\n NL 136 1
\n NL 137 7
\n NL 138 1
'abc' STRING 139 1
\n NL 139 6
' INVALID 140 1
def WORD 140 2
\n NL 140 5
'ghi' STRING 141 1
jkl WORD 141 6
\n NL 141 41
'1' STRING 142 1
'2' STRING 142 4
\n NL 142 41
'a' STRING 143 1
'b' STRING 143 5
\n NL 143 8
